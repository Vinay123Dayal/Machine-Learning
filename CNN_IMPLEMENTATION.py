# -*- coding: utf-8 -*-
"""ML_ASSIGNMENT3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13tDJBlkw6OcxbfIhQ-fqmVZDsy4oIpDf
"""

import pandas as pd

data=pd.read_excel("Q3Dataset.xlsx").drop_duplicates();
data.head()

import nltk;
nltk.download('stopwords')

from nltk.tokenize import RegexpTokenizer
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english')) 
X=[];

Y=data['Column2'].to_numpy();
print(len(Y))
count=0;
for i in data['Column1']:
  text=i.split(" ");
  text2="";
  for j in text:      #Removing stopwords
    if(len(j)>=1):
      if j not in stop_words:
        text2+=" "+j.lower();  #converting all words to lower
  tokenizer1=RegexpTokenizer(r'\w+');
  text3=tokenizer1.tokenize(text2);    #Removing punctuation
  text4="";
  for j in text3:
    text4+=j+" ";
  X.append(text4);

##Converting to TF-IDF 
from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer()
X_p=vectorizer.fit_transform(X);
count=0;
print(X_p.shape);
x_numpy=X_p.toarray();
print(len(vectorizer.get_feature_names()))
print(x_numpy);

X = pd.DataFrame(x_numpy,columns=vectorizer.get_feature_names());
print(X.head());

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.3,random_state=3);
print(X_train);

from sklearn import svm

from sklearn.model_selection  import GridSearchCV
parameters = {'kernel':('linear', 'rbf', 'poly'), 'C':[0.01, 0.1, 1,10,20,50,100]}
classifier2 = svm.SVC()
model = GridSearchCV(estimator=classifier2,param_grid=parameters,cv=5);
model.fit(X_train, Y_train)
score = model.best_score_
print(score)

print(model.best_params_);

classifier=svm.SVC(kernel='rbf',C=1);
classifier.fit(X_train, Y_train);

y_pred=classifier.predict(X_test);

from sklearn.metrics import accuracy_score
print(accuracy_score(Y_test,y_pred));

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(Y_test,y_pred);

print(cm)

from sklearn.metrics import f1_score

f1=f1_score(Y_test,y_pred);
print(f1)

